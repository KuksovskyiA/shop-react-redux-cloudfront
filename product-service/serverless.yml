# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  httpApi:
    cors: true


# you can overwrite defaults here
  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            # - "Fn::GetAtt": [products, stocks]
            - { "Fn::GetAtt": [productsTable, Arn] }
            - { "Fn::GetAtt": [stocksTable, Arn] }

# you can define service wide environment variables here
  environment:
    TABLE_PRODUCTS:
      Ref: productsTable
    TABLE_STOCKS:
      Ref: stocksTable

functions:
  getProductsList:
    handler: src/handlers/getProductsListHandler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
  createProduct:
    handler: src/handlers/createProductHandler.createProduct
    events:
      - httpApi:
          path: /products
          method: post
  getProductsById:
    handler: src/handlers/getProductsByIdHandler.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  catalogBatchProcess:
    handler: functions/catalogBatchProcess/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: 
              - catalogBatchProcessQueue
              - Arn
          batchSize: 5

# you can add CloudFormation resource templates here
resources:
 Resources:
  catalogBatchProcessQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "catalogBatchProcessQueue"
  createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "createProductTopic"
  createProductSubscription:
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: Andrii_Kuksovskyi@epam.com
        Protocol: email
        TopicArn: {"Ref": "createProductTopic"}
  productsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: productsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  stocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: stocksTable
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
